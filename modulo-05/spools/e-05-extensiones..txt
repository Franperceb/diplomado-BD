##JORGE FRANCISCO PEREDA CEBALLOS
##12-01-2024
##Módulo 05. E-05-Extensiones.
-------------------------------------------

##SCRIPT
------------------------------------------------

--@Autor: Jorge Francisco Pereda Ceballos
--@Fecha creación: 12/01/2024
--@Descripción: Ejercicio 05 - Módulo 05. Extensiones

Prompt consultando extensiones, conectando como sys
connect sys/system2 as sysdba

begin
  execute immediate 'drop table jorge05.t04_ejemplo_extensiones';
exception
  when others then
    null;
end;
/

Prompt creando tabla de prueba
create table jorge05.t04_ejemplo_extensiones(
  str char(1024)
);

Prompt consultando datos de las extensiones
set linesize window

select segment_type, tablespace_name,file_id,extent_id,block_id, 
  bytes/1024 extent_size_kb, blocks
from dba_extents
where segment_name ='T04_EJEMPLO_EXTENSIONES'
and owner = 'JORGE05';

Prompt reservando una nueva extension
alter table JORGE05.t04_ejemplo_extensiones allocate extent;

Prompt mostrando nuevamente los datos de las extensiones
select segment_type, tablespace_name,file_id,extent_id,block_id, 
  bytes/1024 extent_size_kb, blocks
from dba_extents
where segment_name ='T04_EJEMPLO_EXTENSIONES'
and owner = 'JORGE05';

Pause Enter para continuar

Prompt insertando 100 registros
begin
  for v_index in 1..100 loop
    insert into  JORGE05.t04_ejemplo_extensiones values('A');
  end loop;
end;
/
commit;


Prompt mostrando datos de las extensiones despues de la inserción

select segment_type, tablespace_name,file_id,extent_id,block_id, 
  bytes/1024 extent_size_kb, blocks
from dba_extents
where segment_name ='T04_EJEMPLO_EXTENSIONES'
and owner = 'JORGE05';

Prompt mostrando estado de los bloques
set serveroutput on
declare
  v_unformatted_blocks number;
  v_unformatted_bytes number;
  v_fs1_blocks   number;
  v_fs1_bytes    number;
  v_fs2_blocks   number;
  v_fs2_bytes    number;
  v_fs3_blocks   number;
  v_fs3_bytes    number;
  v_fs4_blocks   number;
  v_fs4_bytes    number;
  v_full_blocks  number;
  v_full_bytes   number;
begin
  dbms_space.space_usage(
    'JORGE05'           ,
    'T04_EJEMPLO_EXTENSIONES'            ,
    'TABLE'            ,
    v_unformatted_blocks      ,
    v_unformatted_bytes       ,
    v_fs1_blocks              ,
    v_fs1_bytes               ,
    v_fs2_blocks              ,
    v_fs2_bytes               ,
    v_fs3_blocks              ,
    v_fs3_bytes               ,
    v_fs4_blocks              ,
    v_fs4_bytes               ,
    v_full_blocks             ,
    v_full_bytes              
  );

  dbms_output.put_line('Mostrando valores de los bloques despues de insercion de 100 registros');
  dbms_output.put_line('v_unformatted_blocks =  '||v_unformatted_blocks);
  dbms_output.put_line('v_unformatted_bytes  = '||v_unformatted_bytes);
  dbms_output.put_line('v_fs1_blocks = '||v_fs1_blocks );
  dbms_output.put_line('v_fs1_bytes  = '||v_fs1_bytes  );
  dbms_output.put_line('v_fs2_blocks = '||v_fs2_blocks );
  dbms_output.put_line('v_fs2_bytes  = '||v_fs2_bytes  );
  dbms_output.put_line('v_fs3_blocks = '||v_fs3_blocks );
  dbms_output.put_line('v_fs3_bytes  = '||v_fs3_bytes  );
  dbms_output.put_line('v_fs4_blocks = '||v_fs4_blocks );
  dbms_output.put_line('v_fs4_bytes  = '||v_fs4_bytes  );
  dbms_output.put_line('v_full_blocks= '||v_full_blocks);
  dbms_output.put_line('v_full_bytes = '||v_full_bytes );

end;
/

Prompt Eliminando 100 registros

begin
  execute immediate 'truncate table JORGE05.t04_ejemplo_extensiones';
exception
  when others then
    null;
end;
/

Prompt mostrando datos de las extensiones despues de truncate

select segment_type, tablespace_name,file_id,extent_id,block_id, 
  bytes/1024 extent_size_kb, blocks
from dba_extents
where segment_name ='T04_EJEMPLO_EXTENSIONES'
and owner = 'JORGE05';

Prompt mostrando estado de los bloques después del truncate
set serveroutput on
declare
  v_unformatted_blocks number;
  v_unformatted_bytes number;
  v_fs1_blocks   number;
  v_fs1_bytes    number;
  v_fs2_blocks   number;
  v_fs2_bytes    number;
  v_fs3_blocks   number;
  v_fs3_bytes    number;
  v_fs4_blocks   number;
  v_fs4_bytes    number;
  v_full_blocks  number;
  v_full_bytes   number;
begin
  dbms_space.space_usage(
    'JORGE05'           ,
    'T04_EJEMPLO_EXTENSIONES'            ,
    'TABLE'            ,
    v_unformatted_blocks      ,
    v_unformatted_bytes       ,
    v_fs1_blocks              ,
    v_fs1_bytes               ,
    v_fs2_blocks              ,
    v_fs2_bytes               ,
    v_fs3_blocks              ,
    v_fs3_bytes               ,
    v_fs4_blocks              ,
    v_fs4_bytes               ,
    v_full_blocks             ,
    v_full_bytes              
  );

  dbms_output.put_line('Mostrando valores de los bloques despues de truncate');
  dbms_output.put_line('v_unformatted_blocks =  '||v_unformatted_blocks);
  dbms_output.put_line('v_unformatted_bytes  = '||v_unformatted_bytes);
  dbms_output.put_line('v_fs1_blocks = '||v_fs1_blocks );
  dbms_output.put_line('v_fs1_bytes  = '||v_fs1_bytes  );
  dbms_output.put_line('v_fs2_blocks = '||v_fs2_blocks );
  dbms_output.put_line('v_fs2_bytes  = '||v_fs2_bytes  );
  dbms_output.put_line('v_fs3_blocks = '||v_fs3_blocks );
  dbms_output.put_line('v_fs3_bytes  = '||v_fs3_bytes  );
  dbms_output.put_line('v_fs4_blocks = '||v_fs4_blocks );
  dbms_output.put_line('v_fs4_bytes  = '||v_fs4_bytes  );
  dbms_output.put_line('v_full_blocks= '||v_full_blocks);
  dbms_output.put_line('v_full_bytes = '||v_full_bytes );

end;
/



















-----------------------------------------------------




##SALIDA DE EJECUCIÓN
------------------------------------------------------

sys@jpcdip02> start e-05-extensiones.sql
consultando extensiones, conectando como sys
Connected.

PL/SQL procedure successfully completed.

creando tabla de prueba

Table created.

consultando datos de las extensiones

no rows selected

reservando una nueva extension

Table altered.

mostrando nuevamente los datos de las extensiones

SEGMENT_TYPE	   TABLESPACE_NAME		     FILE_ID  EXTENT_ID   BLOCK_ID EXTENT_SIZE_KB     BLOCKS
------------------ ------------------------------ ---------- ---------- ---------- -------------- ----------
TABLE		   USERS				   4	      0      93664	       64	   8
TABLE		   USERS				   4	      1      93672	       64	   8

Enter para continuar

insertando 100 registros

PL/SQL procedure successfully completed.


Commit complete.

mostrando datos de las extensiones despues de la inserción

SEGMENT_TYPE	   TABLESPACE_NAME		     FILE_ID  EXTENT_ID   BLOCK_ID EXTENT_SIZE_KB     BLOCKS
------------------ ------------------------------ ---------- ---------- ---------- -------------- ----------
TABLE		   USERS				   4	      0      93664	       64	   8
TABLE		   USERS				   4	      1      93672	       64	   8
TABLE		   USERS				   4	      2      93680	       64	   8

mostrando estado de los bloques
Mostrando valores de los bloques despues de insercion de 100 registros
v_unformatted_blocks =	0
v_unformatted_bytes  = 0
v_fs1_blocks = 0
v_fs1_bytes  = 0
v_fs2_blocks = 0
v_fs2_bytes  = 0
v_fs3_blocks = 1
v_fs3_bytes  = 8192
v_fs4_blocks = 5
v_fs4_bytes  = 40960
v_full_blocks= 14
v_full_bytes = 114688

PL/SQL procedure successfully completed.

Eliminando 100 registros

PL/SQL procedure successfully completed.

mostrando datos de las extensiones despues de truncate

SEGMENT_TYPE	   TABLESPACE_NAME		     FILE_ID  EXTENT_ID   BLOCK_ID EXTENT_SIZE_KB     BLOCKS
------------------ ------------------------------ ---------- ---------- ---------- -------------- ----------
TABLE		   USERS				   4	      0      93664	       64	   8

mostrando estado de los bloques después del truncate
Mostrando valores de los bloques despues de truncate
v_unformatted_blocks =	0
v_unformatted_bytes  = 0
v_fs1_blocks = 0
v_fs1_bytes  = 0
v_fs2_blocks = 0
v_fs2_bytes  = 0
v_fs3_blocks = 0
v_fs3_bytes  = 0
v_fs4_blocks = 0
v_fs4_bytes  = 0
v_full_blocks= 0
v_full_bytes = 0

PL/SQL procedure successfully completed.

---------------------------------------------------------------------


##Comentarios y CONCLUSIONES
------------------------------------------
En este ejercicio, se exploró el manejo de extensiones en una tabla en Oracle, evaluando su comportamiento y características.
Se creó una tabla con columnas de tamaño considerable, y mediante consultas a la vista dba_extents, se analizaron datos importantes sobre las extensiones, 
como el tipo de segmento, el tablespace, el file_id, el extent_id, el block_id, el tamaño de la extensión en kilobytes y el número de bloques.
Se procedió a reservar manualmente una nueva extensión, seguido de la inserción de 100 registros en la tabla. Se realizó una nueva consulta a dba_extents 
para analizar los cambios en las extensiones y entender cómo se reflejaban en la base de datos.
Posteriormente, se utilizó el procedimiento dbms_space.space_usage para obtener información más precisa y detallada sobre el espacio ocupado por cada bloque 
de datos en las extensiones de la tabla. Se generó un programa PL/SQL que invocó este procedimiento y se analizaron los resultados obtenidos.
Finalmente, se diseñó una sentencia SQL que provocaría la liberación de las extensiones creadas al eliminar todos los registros de la tabla, 
sin eliminar la tabla en sí. Este ejercicio proporcionó una comprensión práctica de cómo se gestionan y utilizan las extensiones en Oracle, 
así como las herramientas disponibles para monitorear y comprender el espacio ocupado por las mismas en la base de datos. Gracias a este ejercicio
se comprendió de mejor manera el concepto de extensiones junto con su asignación a sus correspondientes segmentos. Se resaltó la diferencia de truncate al limpiar
los bloques con delete el cual meramente borra los registros pero no limpiar los bloques de datos.





